{"version":3,"sources":["components/Scanner.js","App.js","serviceWorker.js","index.js"],"names":["Scanner","useState","item","setItem","format","setFormat","onDetected","data","codeResult","code","useEffect","Quagga","init","inputStream","type","constraints","width","height","facing","locator","patchSize","halfSample","numOfWorkers","decoder","readers","debug","drawBoundingBox","showFrequency","drawScanline","showPattern","multiple","locate","err","console","log","start","offDetected","stop","Row","id","Col","className","autoPlay","preload","src","muted","Card","bg","style","Body","Title","ListGroup","ListGroupItem","App","scann","setScann","Container","Button","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"oVAsFeA,G,MAjFC,WAAO,IAAD,EAEIC,qBAFJ,mBAEbC,EAFa,KAEPC,EAFO,OAGQF,qBAHR,mBAGbG,EAHa,KAGLC,EAHK,KAIdC,EAAa,SAACC,GAClBJ,EAAQI,EAAKC,WAAWC,MACxBJ,EAAUE,EAAKC,WAAWJ,SAgD5B,OA5CAM,qBAAU,WAsCR,OArCAC,IAAOC,KACL,CACEC,YAAa,CACXC,KAAM,aACNC,YAAa,CACXC,MAAO,IACPC,OAAQ,IACRC,OAAQ,gBAGZC,QAAS,CACPC,UAAW,SACXC,YAAY,GAEdC,aAAc,EACdC,QAAS,CACPC,QAAS,CAAC,kBAAmB,gBAC7BC,MAAO,CACLC,iBAAiB,EACjBC,eAAe,EACfC,cAAc,EACdC,aAAa,GAEfC,UAAU,GAEZC,QAAQ,IAEV,SAAUC,GACR,GAAIA,EACF,OAAOC,QAAQC,IAAIF,GAErBrB,IAAOwB,WAGXxB,IAAOL,WAAWA,GAGX,WACLK,IAAOyB,YAAY9B,GACnBK,IAAO0B,UAER,IAGD,kBAAC,WAAD,KAEI,kBAACC,EAAA,EAAD,CAAKC,GAAG,aACN,kBAACC,EAAA,EAAD,KACA,yBAAKD,GAAG,cAAcE,UAAU,YAC9B,2BAAOA,UAAU,cAAcC,SAAS,OAAOC,QAAQ,OAAOC,IAAI,GAAGC,MAAM,SAC3E,4BAAQJ,UAAU,oBAIpB,kBAACD,EAAA,EAAD,KACE,kBAACM,EAAA,EAAD,CAAMC,GAAG,YAAYC,MAAO,CAAEhC,MAAO,UACnC,kBAAC8B,EAAA,EAAKG,KAAN,KACE,kBAACH,EAAA,EAAKI,MAAN,iBAEF,kBAACC,EAAA,EAAD,CAAWV,UAAU,oBACnB,kBAACW,EAAA,EAAD,cAAsBlD,GACtB,kBAACkD,EAAA,EAAD,gBAAwBhD,UCrDzBiD,MAnBf,WAAgB,IAAD,EAEYpD,oBAAS,GAFrB,mBAEPqD,EAFO,KAEAC,EAFA,KAIb,OACE,kBAAC,WAAD,KACE,kBAACjB,EAAA,EAAD,CAAKC,GAAG,SAAQ,gDAChB,kBAACD,EAAA,EAAD,CAAKG,UAAU,8BAA6B,gFAC5C,kBAACe,EAAA,EAAD,KACE,kBAAClB,EAAA,EAAD,KAAK,kBAACmB,EAAA,EAAD,CAAQlB,GAAG,YAAYmB,QAAS,kBAAMH,GAAUD,KAAUA,EAAQ,OAAS,eAGlF,kBAACE,EAAA,EAAD,CAAWjB,GAAG,cACd,kBAACD,EAAA,EAAD,KAAMgB,EAAQ,kBAAC,EAAD,MAAc,S,MCNdK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3C,QAAQ2C,MAAMA,EAAMC,c","file":"static/js/main.a5015f5c.chunk.js","sourcesContent":["import React, { Fragment, useEffect, useState } from \"react\";\r\nimport { Row, ListGroup, Card, ListGroupItem, Col } from 'react-bootstrap';\r\nimport Quagga from \"quagga\";\r\nimport './scann.css';\r\n\r\nconst Scanner = () => {\r\n\r\n  const [item, setItem] = useState();\r\n  const [format, setFormat] = useState();\r\n  const onDetected = (data) => {\r\n    setItem(data.codeResult.code);\r\n    setFormat(data.codeResult.format);\r\n    \r\n  };\r\n\r\n  useEffect(() => {\r\n    Quagga.init(\r\n      {\r\n        inputStream: {\r\n          type: \"LiveStream\",\r\n          constraints: {\r\n            width: 425,\r\n            height: 400,\r\n            facing: \"environment\", // or user\r\n          },\r\n        },\r\n        locator: {\r\n          patchSize: \"medium\",\r\n          halfSample: true,\r\n        },\r\n        numOfWorkers: 2,\r\n        decoder: {\r\n          readers: [\"code_128_reader\", \"'ean_reader'\"],\r\n          debug: {\r\n            drawBoundingBox: false,\r\n            showFrequency: false,\r\n            drawScanline: false,\r\n            showPattern: false,\r\n          },\r\n          multiple: false,\r\n        },\r\n        locate: true,\r\n      },\r\n      function (err) {\r\n        if (err) {\r\n          return console.log(err);\r\n        }\r\n        Quagga.start();\r\n      }\r\n    );\r\n    Quagga.onDetected(onDetected );\r\n    \r\n\r\n    return () => {\r\n      Quagga.offDetected(onDetected);\r\n      Quagga.stop();\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <Fragment>\r\n\r\n        <Row id=\"videodata\">\r\n          <Col>\r\n          <div id=\"interactive\" className=\"viewport\">\r\n            <video className=\"videoCamera\" autoPlay=\"true\" preload=\"auto\" src=\"\" muted=\"true\"></video>\r\n            <canvas className=\"drawingBuffer\"></canvas>\r\n          </div>\r\n          </Col>\r\n\r\n          <Col>\r\n            <Card bg=\"secondary\" style={{ width: '18rem' }}>\r\n              <Card.Body>\r\n                <Card.Title>Product</Card.Title>\r\n              </Card.Body>\r\n              <ListGroup className=\"list-group-flush\">\r\n                <ListGroupItem>Code: {item}</ListGroupItem>\r\n                <ListGroupItem>Format: {format}</ListGroupItem>\r\n              </ListGroup>\r\n            </Card>\r\n          </Col>\r\n        </Row>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Scanner;","import React, { Fragment, useState } from 'react';\nimport { Container, Row, Button} from 'react-bootstrap';\nimport './App.css';\nimport Scanner from './components/Scanner'\n\nfunction App() {\n\n  const[scann, setScann] = useState(false);\n\n  return (\n    <Fragment>\n      <Row id=\"title\"><h1>CODE-BAR READER</h1></Row>\n      <Row className=\"justify-content-center m-4\"><h5>Enabled formats: code_128_reader and ean_reader</h5></Row>\n      <Container>\n        <Row><Button id=\"btn-start\" onClick={() => setScann(!scann) }>{scann ? 'Stop' : 'Scann Now'}</Button></Row>\n      </Container>\n\n      <Container id=\"scannerRow\">\n      <Row>{scann ? <Scanner /> : null}</Row>\n      </Container>\n    </Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}